require 'spec_helper'

describe S3BrowserUploads::ViewHelpers, :type => 'helper' do
  include Capybara::RSpecMatchers
  include RSpec::Rails::HelperExampleGroup
  let(:form_definition) do 
    S3BrowserUploads::FormDefinition.new(:region => 'eu-west-1', 
                                         :bucket => 'some-bucket',
                                         :expires => Time.now + 1800,
                                         :aws_access_key_id => 'AnAccessKey',
                                         :aws_secret_access_key => 'ASecretKey')
  end

  describe 's3_form' do
    let(:content) {helper.s3_form(form_definition) {}}

    describe 'form tag' do
      subject {Capybara.string(content).find('form')}
      its([:action]) { should == form_definition.endpoint }
      its([:enctype]) { should == 'multipart/form-data' }
      its([:method]) { should == 'POST' }

      context 'html options are passed' do
        it 'should add them to the form' do
          helper.s3_form(form_definition, :id => 'a-form'){}.should have_css 'form#a-form'
        end
      end
    end

    describe 'form contents' do
      subject {content}
      it 'should include a utf8 enforcer tag' do
        should have_hidden_input("x-ignore-utf8").with_value("\u2713")
      end

      it { should  have_hidden_input('AWSAccessKeyID').with_value("AnAccessKey") } 
      it { should  have_hidden_input('signature').with_value(form_definition.signature) } 
      it { should  have_hidden_input('policy').with_value(form_definition.encoded_policy) } 
      it { should  have_hidden_input('bucket').with_value(form_definition.bucket) } 


      context 'a field was added to the form' do 
        before(:each) { form_definition.add_field 'Content-Disposition', 'inline'}
        it { should have_hidden_input('Content-Disposition').with_value('inline')}
      end

      context 'the block has content' do
        let(:content) {helper.s3_form(form_definition) {submit_tag 'Upload'}}
        
        it 'should include it in the form' do
          content.should have_css('input[type=submit][value=Upload]')
        end

        it 'should include it after the autogenerated inputs' do
          Capybara.string(content).all('input').last['type'].should == 'submit'
          Capybara.string(content).all('input').last['value'].should == 'Upload'
        end
      end

    end
  end

  RSpec::Matchers.define :have_hidden_input do |name|

    chain :with_value do |value|
      @value = value
    end

    match do |x|
      selector = "input[type=hidden][name='#{name}']"
      selector += "[value='#{@value}']" if @value
      x.should have_css(selector)
    end
  end

end